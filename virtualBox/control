#!/bin/bash

DEFAULT_SAVE_INTERVAL=20

#complite
function getNameFromIP(){
	VBoxManage list runningvms | cut -d "{" -f1 | sed "s/\"//g" | while read VBOXNAME; do
    	IP=$(VBoxManage guestproperty get "$VBOXNAME" /VirtualBox/GuestInfo/Net/1/V4/IP | cut -d":" -f2)
	if [ $IP = $1 ]; then
		echo "$VBOXNAME"
		return 0
	fi
	done
	return 0
}

#complite
function getUnusedName(){
#length should be modified
	local randString=''
	while : ; do
		randString=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5)
		if  ! VBoxManage list vms | awk '{print $1}'| grep -q "$randString" ; then
			break
		fi
	done
	echo $randString
	return 0
}

#complite
function saveSnapshot(){
	local randString=$(getUnusedName)
	if ! VBoxManage controlvm $1 savestate ; then
		echo "Error in save snapshot" >&2
	fi
	local prevStatus=$(sqlite3 -batch vminfo.db "SELECT PREV_STATE FROM VM WHERE NAME = '$1' ;")
	if ! VBoxManage clonevm $1 --name $randString && VBoxManage unregistervm --delete $prevStatus; then
		echo "Error in save snapshot" >&2
	fi
	if ! sqlite3 -batch vminfo.db "INSERT INTO VM ('$randString',STATUS,SAVE_INTERVAL,TURN_ON_TIME,SPOT_PRICE,BILL,START_NAME,'$1') SELECT * FROM VM WHERE NAME = '$1';" && sqlite3 -batch vminfo.db "DELETE FROM VM WHERE NAME='$1'"; then
		echo "Error in saving DB." >&2
		return 1
	fi
	VBoxManage startvm $randString --type headless&
	return 0
}

#complite
function loadSnapshot(){
	local prevStatus=$(sqlite3 -batch vminfo.db "SELECT PREV_STATE FROM VM WHERE NAME = '$1' ;")
	VBoxManage clonevm $prevStatus --name $1 && VBoxManage startvm $1 --type headless
	return 0
}

#complite
function initOnDemand(){
	if [ ! -z $(sqlite3 -batch vminfo.db "SELECT * FROM VM WHERE NAME='$1';") ]; then
		sqlite3 -batch vminfo.db "DELETE FROM VM WHERE NAME='$1';"
	fi

	if ! VBoxManage controlvm $1 savestate ; then
		echo "Error in save snapshot" >&2
	fi
	
	snapshotName=$(getUnusedName)
	if ! sqlite3 -batch vminfo.db "INSERT INTO VM VALUES ('$snapshotName','READY_ONDEMAND',NULL,$(date +%s%3N),NULL,0,'$1','$1');" ;then
		echo "Error in saving DB." >&2
		return 1
	fi
	changeStatus $1 "RUN_ONDEMAND"
	loadSnapshot $1 $snapshotName
	return $?
}

#complite
function initSpot(){
	echo "in initspot $1 $2"
	if [ ! -z $(sqlite3 -batch vminfo.db "SELECT * FROM VM WHERE NAME='$1';") ] ; then
		sqlite3 -batch vminfo.db "DELETE FROM VM WHERE NAME='$1';"
	fi
	if ! VBoxManage controlvm $1 savestate ; then
		echo "Error in save snapshot" >&2
	fi
	snapshotName=$(getUnusedName)
	if ! sqlite3 -batch vminfo.db "INSERT INTO VM VALUES ('$snapshotName','READY_SPOT',$DEFAULT_SAVE_INTERVAL,$(date +%s%3N),$2,0,'$1','$1');" ;then
		echo "Error in saving DB." >&2
		return 1
	fi
	changeStatus $snapshotName "RUN_SPOT"
	loadSnapshot $snapshotName
	return $?
}

#complite
function changeStatus(){
	local prevStatus=$(sqlite3 -batch vminfo.db "SELECT STATUS FROM VM WHERE NAME = '$1' ;")
	local curTime=$(date +%s%3N)
	case $prevStatus in
		"RUN_SPOT_NO_SAVE")
			local prevTime = $(sqlite3 -batch vminfo.db "SELECT TURN_ON_TIME WHERE NAME = '$1' ;")
			local price = $(sqlite3 -batch vminfo.db "SELECT PRICE WHERE MODE = 'SPOT';")
			if ! sqlite3 -batch vminfo.db "UPDATE VM SET BILL = BILL + $(echo "($curTime-$prevTime)*price"|bc -l) WHERE NAME = '$1' ;" ; then
				echo "Error in saving DB." >&2
				return 1
			fi
			;;
		"RUN_SPOT")
			local prevTime = $(sqlite3 -batch vminfo.db "SELECT TURN_ON_TIME WHERE NAME = $1 ;")
			local price = $(sqlite3 -batch vminfo.db "SELECT PRICE WHERE MODE = 'SPOT';")
			if ! sqlite3 -batch vminfo.db "UPDATE VM SET BILL = BILL + $(echo "($curTime-$prevTime)*price"|bc -l) WHERE NAME = '$1' ;" ; then
				echo "Error in saving DB." >&2
				return 1
			fi
			;;
		"RUN_ONDEMAND")
			local prevTime = $(sqlite3 -batch vminfo.db "SELECT TURN_ON_TIME WHERE NAME = $1 ;")
			local price = $(sqlite3 -batch vminfo.db "SELECT PRICE WHERE MODE = 'ONDEMAND';")
			if ! sqlite3 -batch vminfo.db "UPDATE VM SET BILL = BILL + $(echo "($curTime-$prevTime)*price"|bc -l) WHERE NAME = '$1' ;" ; then
				echo "Error in saving DB." >&2
				return 1
			fi
			;;
	esac
	if ! sqlite3 -batch vminfo.db "UPDATE VM SET STATUS = '$2' , TURN_ON_TIME = $curTime WHERE NAME = '$1' ;" ; then
		echo "Error in saving DB." >&2
		return 1
	fi
	return 0
}

#complite
function changePrice(){
	if [[ ! $2 =~ ^[+-]?[0-9]+\.?[0-9]*$ ]];then
		echo "Please check the parameters. The price is not float value." >&2
		return 1
	fi

	if [ sqlite3 -batch vminfo.db "UPDATE VM SET SPOT_PRICE = $2 WHERE NAME = $1;" ]; then
		echo "Error in saving DB." >&2
		return 1
	fi
	return 0
}

#complite
function getCurrentPrice(){
#getCurrentPrice {SPOT,ONDEMAND}
	if [[ ! $1 =~ ^(SPOT|ONDEMAND)$ ]]; then
		echo "Please check the parameters. There is no $1 mode." >&2
		return 1
	fi
	echo $(sqlite3 -batch vminfo.db "SELECT PRICE FROM GB WHERE MODE = $1 ;")
	return 0
}

#complite
function changeCurrentPrice(){
#changeCurrentPrice {SPOT,ONDEMAND} price
	if [[ ! $2 =~ ^[+-]?[0-9]+\.?[0-9]*$ ]];then
		echo "Please check the parameters. The price is not float value." >&2
		return 1
	fi
	if [[ ! $1 =~ ^(SPOT|ONDEMAND)$ ]]; then
		echo "Please check the parameters. There is no $1 mode." >&2
		return 1
	fi
	if [ sqlite3 -batch vminfo.db "UPDATE GB SET PRICE = $2 WHERE MODE = $1 ;" ]; then
		echo "Error in saving DB." >&2
		return 1
	fi
	return 0
}

#complite
function changeSaveInterval(){
#changeSaveInterval vmName interval
	if [[ ! $2 =~ ^[+-]?[0-9]+$ ]];then
		echo "Please check the parameters. The price is not integer value." >&2
		return 1
	fi
	if [ sqlite3 -batch vminfo.db "UPDATE VM SET SAVE_INTERVAL = $2 WHERE NAME = $1 ;" ]; then
		echo "Error in saving DB." >&2
		return 1
	fi
	return 0
}

ACSDIR=~/acs/

#if [ "$(id -u)" -ne 0 ]; then
#	echo 'Please run as root or using sudo.' >&2
#	exit 1
#fi

if [ ! -d $ACSDIR ]; then
	echo "ACS is not installed. Please execute install.sh first" >&2
	exit 1
fi

cd $ACSDIR

case $1 in
	"CHANGE_GLOBAL_PRICE")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' >&2
			exit 1
		fi
		changeCurrentPrice $1 $3
		exit $?
		;;
esac

vmName=$(getNameFromIP $1)
if [ -z "$vmName" ]; then
	echo 'There is no such IP.' >&2
	exit 0
fi

case $2 in
	"INIT_ONDEMAND")
		if [ "$#" -ne 2 ]; then
			echo 'Please check the number of parameters.' >&2
			exit 1
		fi
		initOnDemand $vmName
		exit $?
		;;
	"INIT")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' >&2
			exit 1
		fi
		initSpot $vmName $3
		exit $?
		;;
	"CHANGE_STATUS")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' >&2
			exit 1
		fi
		changeStatus $vmName $3
		exit $?
		;;
	"CHAGE_PRICE")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' >&2
			exit 1
		fi
		changePrice $vmName $3
		exit $?
		;;
	"CHANGE_SAVE_INTERVAL")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' >&2
			exit 1
		fi
		changeSaveInterval $vmName $3
		exit $?
		;;
esac

exit 1
