#!/bin/bash

DEFAULT_SAVE_INTERVAL=20

function saveSnapshot(){
	local randString=''
	while : ; do
		randString=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 30)
		if [ ! -f $randString"mem" ] ; then
			break
		fi
	done
	virsh snapshot-create-as --domain $1 $randString --diskspec vda,file=$SNAPSHOTDIR/$randString"disk",snapshot=external --memspec file=$SNAPSHOTDIR/$randString"mem",snapshot=external --atomic
#####should add if return is not 
	local prevSave=$(sqlite3 -batch vminfo.db "SELECT PATH FROM FS WHERE NAME = '$1';")
	sqlite3 -batch vminfo.db "UPDATE FS SET PATH = '$randString' WHERE NAME ='$1';"
	if [ $prevSave != "INIT" ]; then
		rm $SNAPSHOTDIR/$prevSave"mem"
		rm $SNAPSHOTDIR/$prevSave"disk"
	fi
	return 0
}

function loadSnapshot(){
	local snapshotName=$(sqlite3 -batch vminfo.db "SELECT PATH FROM FS WHERE NAME = '$1';")
	virsh snapshot-restore $1 $snapshotName
	return 0
}

function initOnDemand(){
	if [ sqlite3 -batch vminfo.db "SELECT * FROM FS WHERE NAME='$1';"|wc -l ]; then
		sqlite3 -batch vminfo.db "DELETE FROM FS WHERE NAME='$1';"
	fi
	if [ sqlite3 -batch vminfo.db "SELECT * FROM VM WHERE NAME='$1';"|wc -l ]; then
		sqlite3 -batch vminfo.db "DELETE FROM VM WHERE NAME='$1';"
	fi

	if [ sqlite3 -batch vminfo.db "INSERT INTO VM VALUES ('$1','READY_ONDEMAND',NULL,$(date +%s3N),NULL,0);" ];then
		echo "Error in saving DB." &>2
		return 1
	fi
	if [ sqlite3 -batch vminfo.db "INSERT INTO FS VALUES ('$1','INIT');" ];then
		echo "Error in saving DB." &>2
		return 1
	fi
	changeStatus $1 "RUN_ONDEMAND" && saveSnapshot $1
	return $_
}

function initSpot(){
	if [ sqlite3 -batch vminfo.db "SELECT * FROM FS WHERE NAME='$1';"|wc -l ]; then
		sqlite3 -batch vminfo.db "DELETE FROM FS WHERE NAME='$1';"
	fi
	if [ sqlite3 -batch vminfo.db "SELECT * FROM VM WHERE NAME='$1';"|wc -l ]; then
		sqlite3 -batch vminfo.db "DELETE FROM VM WHERE NAME='$1';"
	fi

	if [ sqlite3 -batch vminfo.db "INSERT INTO VM VALUES ('$1','READY_SPOT',$DEFAULT_SAVE_INTERVAL,$(date +%s3N),$2,0);" ];then
		echo "Error in saving DB." $&>2
		return 1
	fi
	if [ sqlite3 -batch vminfo.db "INSERT INTO FS VALUES ('$1','INIT');" ];then
		echo "Error in saving DB." $&>2
		return 1
	fi
	changeStatus $1 "RUN_SPOT" && saveSnapshot $1
	return $_
}

function changeStatus(){
	local prevStatus = $(sqlite3 -batch vminfo.db "SELECT STATUS WHERE NAME = $1 ;")
	local curTime = $(data +%s3N)
	case $prevStatus in
		"RUN_SPOT_NO_SAVE")
			local prevTime = $(sqlite3 -batch vminfo.db "SELECT TURN_ON_TIME WHERE NAME = $1 ;")
			local price = $(sqlite3 -batch vminfo.db "SELECT PRICE WHERE MODE = 'SPOT';")
			if [ sqlite3 -batch vminfo.db "UPDATE VM SET BILL = BILL + $(echo "($curTime-$prevTime)*price"|bc -l) WHERE NAME =$1 ;" ]; then
				echo "Error in saving DB." &>2
				return 1
			fi
			;;
		"RUN_SPOT")
			local prevTime = $(sqlite3 -batch vminfo.db "SELECT TURN_ON_TIME WHERE NAME = $1 ;")
			local price = $(sqlite3 -batch vminfo.db "SELECT PRICE WHERE MODE = 'SPOT';")
			if [ sqlite3 -batch vminfo.db "UPDATE VM SET BILL = BILL + $(echo "($curTime-$prevTime)*price"|bc -l) WHERE NAME =$1 ;" ]; then
				echo "Error in saving DB." &>2
				return 1
			fi
			;;
		"RUN_ONDEMAND")
			local prevTime = $(sqlite3 -batch vminfo.db "SELECT TURN_ON_TIME WHERE NAME = $1 ;")
			local price = $(sqlite3 -batch vminfo.db "SELECT PRICE WHERE MODE = 'ONDEMAND';")
			if [ sqlite3 -batch vminfo.db "UPDATE VM SET BILL = BILL + $(echo "($curTime-$prevTime)*price"|bc -l) WHERE NAME =$1 ;" ]; then
				echo "Error in saving DB." &>2
				return 1
			fi
			;;
	esac
	if [ sqlite3 -batch vminfo.db "UPDATE VM SET STATUS = $2 , TURN_ON_TIME = $curTime WHERE NAME = $1 ;" ]; then
		echo "Error in saving DB." &>2
		return 1
	fi
	return 0
}

function changePrice(){
	if [[ ! $2 =~ ^[+-]?[0-9]+\.?[0-9]*$ ]];then
		echo "Please check the parameters. The price is not float value." &>2
		return 1
	fi

	if [ sqlite3 -batch vminfo.db "UPDATE VM SET SPOT_PRICE = $2 WHERE NAME = $1;" ]; then
		echo "Error in saving DB." &>2
		return 1
	fi
	return 0
}

function getCurrentPrice(){
	if [[ ! $1 =~ ^(SPOT|ONDEMAND)$ ]]; then
		echo "Please check the parameters. There is no $1 mode." &>2
		return 1
	fi
	echo $(sqlite3 -batch vminfo.db "SELECT PRICE WHERE MODE = $1 ;")
	return 0
}

function changeCurrentPrice(){
	if [[ ! $2 =~ ^[+-]?[0-9]+\.?[0-9]*$ ]];then
		echo "Please check the parameters. The price is not float value." &>2
		return 1
	fi
	if [[ ! $1 =~ ^(SPOT|ONDEMAND)$ ]]; then
		echo "Please check the parameters. There is no $1 mode." &>2
		return 1
	fi
	if [ sqlite3 -batch vminfo.db "UPDATE GB SET PRICE = $2 WHERE MODE = $1 ;" ]; then
		echo "Error in saving DB." &>2
		return 1
	fi
	return 0
}


ACSDIR=/etc/acs/

if [ "$(id -u)" -ne 0 ]; then
	echo 'Please run as root or using sudo.'&>2
	exit 1
fi

if [ -d $ACSDIR ]; then
	echo "ACS is not installed. Please execute install.sh first"&>2
	exit 1
fi

if [ ! 	virsh list --all|sed 1,2d |grep -w -q $2 ]; then
	echo "There is no such name." &>2
	exit 1
fi

cd $ACSDIR

case $1 in
	"INIT_ONDEMAND")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' &>2
			exit 1
		fi
		initOnDemand $2 $3
		exit $_
		;;
	"INIT")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' &>2
			exit 1
		fi
		initSpot $2 $3
		exit $_
		;;
	"CHANGE_STATUS")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' &>2
			exit 1
		fi
		changeStatus $2 $3
		exit $_
		;;
	"CHAGE_PRICE")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' &>2
			exit 1
		fi
		changePrice $2 $3
		exit $_
		;;
	"CHANGE_GLOBAL_PRICE")
		if [ "$#" -ne 3 ]; then
			echo 'Please check the number of parameters.' &>2
			exit 1
		fi
		changeCurrentPrice $2 $3
		exit $_
		;;
esac

exit 1
